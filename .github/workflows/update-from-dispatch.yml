name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check for new content
        id: check-updates
        run: |
          echo "🔍 检查源仓库中的新内容..."
          
          has_updates=false
          latest_date=""
          year_month=""
          
          if [ -d "source-repo/daily" ]; then
            echo "📁 源仓库daily目录存在，开始检查文件..."
            
            # 查找最近3天的文件
            for i in 0 1 2; do
              CHECK_DATE=$(date -d "-$i days" +%Y-%m-%d)
              YEAR_MONTH=$(date -d "-$i days" +%Y-%m)
              echo "检查日期: $CHECK_DATE (年月: $YEAR_MONTH)"
              
              if [ -f "source-repo/daily/${CHECK_DATE}.md" ]; then
                echo "✅ 找到源文件: source-repo/daily/${CHECK_DATE}.md"
                
                # 检查目标文件是否已存在
                TARGET_FILE="content/cn/${YEAR_MONTH}/${CHECK_DATE}.md"
                echo "检查目标文件: $TARGET_FILE"
                
                if [ ! -f "$TARGET_FILE" ]; then
                  echo "🆕 目标文件不存在，需要创建: ${TARGET_FILE}"
                  has_updates=true
                  latest_date=$CHECK_DATE
                  year_month=$YEAR_MONTH
                  break
                else
                  echo "ℹ️ 目标文件已存在: $TARGET_FILE"
                  # 可以进一步比较内容差异
                  SOURCE_SIZE=$(wc -c < "source-repo/daily/${CHECK_DATE}.md")
                  TARGET_SIZE=$(wc -c < "$TARGET_FILE")
                  echo "源文件大小: ${SOURCE_SIZE} bytes, 目标文件大小: ${TARGET_SIZE} bytes"
                  
                  if [ "$SOURCE_SIZE" -ne "$TARGET_SIZE" ]; then
                    echo "📝 文件大小不同，需要更新"
                    has_updates=true
                    latest_date=$CHECK_DATE
                    year_month=$YEAR_MONTH
                    break
                  fi
                fi
              else
                echo "❌ 源文件不存在: source-repo/daily/${CHECK_DATE}.md"
              fi
            done
            
            # 输出结果
            if [ "$has_updates" = true ]; then
              echo "✅ 发现需要更新的内容!"
              echo "latest_date=${latest_date}"
              echo "year_month=${year_month}"
              echo "has_updates=true" >> $GITHUB_OUTPUT
              echo "latest_date=${latest_date}" >> $GITHUB_OUTPUT
              echo "year_month=${year_month}" >> $GITHUB_OUTPUT
            else
              echo "ℹ️ 没有发现新内容或更新"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ 源仓库中没有daily目录"
            ls -la source-repo/ || echo "无法列出源仓库目录"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      - name: Process and convert content
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          LATEST_DATE=${{ steps.check-updates.outputs.latest_date }}
          YEAR_MONTH=${{ steps.check-updates.outputs.year_month }}
          
          echo "📝 开始处理内容..."
          echo "处理日期: ${LATEST_DATE}"
          echo "目标目录: ${YEAR_MONTH}"
          
          # 确保目录存在
          mkdir -p "content/cn/${YEAR_MONTH}"
          mkdir -p "content/en/${YEAR_MONTH}" 
          mkdir -p "content/ja/${YEAR_MONTH}"
          
          # 处理中文版本
          if [ -f "source-repo/daily/${LATEST_DATE}.md" ]; then
            echo "🔄 处理中文版本..."
            
            TARGET_FILE="content/cn/${YEAR_MONTH}/${LATEST_DATE}.md"
            
            # 生成Hugo Front Matter
            cat > "$TARGET_FILE" << EOF
---
title: "AI洞察日报 - ${LATEST_DATE}"
date: ${LATEST_DATE}T08:00:00+08:00
draft: false
tags: ["AI", "人工智能", "技术", "日报"]
categories: ["AI日报"]
weight: 1
---

EOF
            
            # 添加原始内容
            cat "source-repo/daily/${LATEST_DATE}.md" >> "$TARGET_FILE"
            
            echo "✅ 中文版本已处理: $TARGET_FILE"
            echo "文件大小: $(wc -c < "$TARGET_FILE") bytes"
          else
            echo "❌ 源文件不存在: source-repo/daily/${LATEST_DATE}.md"
          fi

      - name: Update index files
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          YEAR_MONTH=${{ steps.check-updates.outputs.year_month }}
          
          # 更新月份索引文件
          INDEX_FILE="content/cn/${YEAR_MONTH}/_index.md"
          if [ ! -f "$INDEX_FILE" ]; then
            echo "📄 创建月份索引文件: $INDEX_FILE"
            cat > "$INDEX_FILE" << EOF
---
title: "${YEAR_MONTH} AI日报"
date: ${YEAR_MONTH}-01T00:00:00+08:00
type: docs
weight: 1
---

# ${YEAR_MONTH} AI洞察日报

本月的AI行业动态和技术趋势汇总。

EOF
            echo "✅ 月份索引文件已创建"
          else
            echo "ℹ️ 月份索引文件已存在: $INDEX_FILE"
          fi

      - name: Commit and push changes
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          echo "📤 准备提交更改..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 显示待提交的文件
          echo "待提交的文件:"
          git status --porcelain
          
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            echo "✅ 发现更改，准备提交..."
            git commit -m "🤖 自动更新AI日报内容 - ${{ steps.check-updates.outputs.latest_date }}

            - 来源: april8000/ai-insight-daily-token
            - 日期: ${{ steps.check-updates.outputs.latest_date }}
            - 触发方式: ${{ github.event_name }}
            "
            git push
            echo "🎉 内容已更新并推送到仓库!"
          fi

      - name: Summary
        if: always()
        run: |
          echo "📊 执行总结:"
          echo "工作流触发方式: ${{ github.event_name }}"
          echo "检查结果: ${{ steps.check-updates.outputs.has_updates }}"
          
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ]; then
            echo "✅ 成功更新内容!"
            echo "更新日期: ${{ steps.check-updates.outputs.latest_date }}"
            echo "目标目录: content/cn/${{ steps.check-updates.outputs.year_month }}/"
          else
            echo "ℹ️ 没有需要更新的内容"
          fi
          
          echo "当前仓库文件结构:"
          find content -name "*.md" -type f | head -10 || echo "content目录不存在或为空"
