name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '30 1 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup fixed tags and summary content
        run: |
          echo "🔧 修复标签条和摘要显示问题..."
          
          # 确保所有必要目录存在
          mkdir -p content/cn
          mkdir -p assets/css
          mkdir -p static/images
          
          # 创建原作者风格的CSS
          cat > assets/css/custom.css << 'EOF'
          /* AI洞察日报 - 修复版 */
          
          h1:first-of-type {
            display: none;
          }
          
          .content {
            max-width: none !important;
            overflow: visible !important;
            line-height: 1.7 !important;
            word-wrap: break-word;
            word-break: break-word;
          }
          
          :root {
            --primary-color: #ff9900;
            --primary-light: #ffaa33;
            --primary-dark: #e68800;
          }
          
          /* 分类标签样式 */
          .content blockquote {
            background: linear-gradient(135deg, rgba(255, 153, 0, 0.1), rgba(255, 153, 0, 0.03));
            border: none;
            border-left: 4px solid var(--primary-color);
            border-radius: 8px;
            padding: 1rem 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 2px 8px rgba(255, 153, 0, 0.1);
          }
          
          .content blockquote p {
            margin: 0 !important;
            color: var(--primary-color) !important;
            font-weight: 600 !important;
            font-size: 0.95rem !important;
          }
          
          .content blockquote code {
            background-color: rgba(255, 153, 0, 0.2) !important;
            color: var(--primary-dark) !important;
            padding: 2px 6px !important;
            border-radius: 4px !important;
            font-weight: 600 !important;
            border: 1px solid rgba(255, 153, 0, 0.3) !important;
          }
          
          /* 新闻条目样式 */
          .content ol li,
          .content ul li {
            margin-bottom: 1.5rem !important;
            padding: 1.2rem !important;
            background: rgba(255, 153, 0, 0.02) !important;
            border-radius: 8px !important;
            border-left: 3px solid var(--primary-color) !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
          }
          
          .content ol li:hover,
          .content ul li:hover {
            background: rgba(255, 153, 0, 0.05) !important;
            transform: translateX(4px) !important;
            box-shadow: 0 4px 12px rgba(255, 153, 0, 0.15) !important;
          }
          
          /* 分类标题样式 */
          .content h3 {
            color: var(--primary-color) !important;
            border-bottom: 2px solid rgba(255, 153, 0, 0.2);
            padding-bottom: 0.5rem;
            margin: 2rem 0 1rem 0 !important;
            font-weight: 700 !important;
          }
          
          /* 链接样式 */
          .content a {
            color: var(--primary-color) !important;
            text-decoration: none !important;
            font-weight: 500 !important;
            transition: all 0.2s ease !important;
          }
          
          .content a:hover {
            color: var(--primary-dark) !important;
            text-decoration: underline !important;
          }
          
          /* 强调文本 */
          .content strong {
            color: var(--primary-color) !important;
            font-weight: 700 !important;
          }
          
          /* 图片样式 */
          .content img {
            margin: 1rem auto !important;
            border-radius: 8px !important;
            max-width: 100% !important;
            height: auto !important;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1) !important;
          }
          
          /* 代码样式 */
          .content code {
            background-color: rgba(255, 153, 0, 0.1) !important;
            color: var(--primary-dark) !important;
            padding: 2px 6px !important;
            border-radius: 4px !important;
            font-size: 0.9em !important;
          }
          
          /* 深色模式样式 */
          html.dark .content blockquote {
            background: linear-gradient(135deg, rgba(255, 153, 0, 0.15), rgba(255, 153, 0, 0.05)) !important;
            border-left-color: #ff9900 !important;
            box-shadow: 0 4px 16px rgba(255, 153, 0, 0.2) !important;
          }
          
          html.dark .content blockquote p {
            color: #ff9900 !important;
          }
          
          html.dark .content blockquote code {
            background-color: rgba(255, 153, 0, 0.25) !important;
            color: #ffaa33 !important;
            border-color: rgba(255, 153, 0, 0.4) !important;
          }
          
          html.dark .content ol li,
          html.dark .content ul li {
            background: rgba(255, 153, 0, 0.08) !important;
            border-left-color: #ff9900 !important;
            color: #f0f0f0 !important;
            box-shadow: 0 2px 8px rgba(255, 153, 0, 0.1) !important;
          }
          
          html.dark .content ol li:hover,
          html.dark .content ul li:hover {
            background: rgba(255, 153, 0, 0.15) !important;
            box-shadow: 0 6px 20px rgba(255, 153, 0, 0.25) !important;
          }
          
          html.dark .content h2,
          html.dark .content h3,
          html.dark .content h4 {
            color: #ff9900 !important;
            border-bottom-color: rgba(255, 153, 0, 0.3) !important;
          }
          
          html.dark .content a {
            color: #ff9900 !important;
          }
          
          html.dark .content a:hover {
            color: #ffaa33 !important;
          }
          
          html.dark .content strong {
            color: #ff9900 !important;
          }
          
          html.dark .content code {
            background-color: #2a2a2a !important;
            color: #ff9900 !important;
            border: 1px solid #444 !important;
          }
          
          html.dark .content img {
            box-shadow: 0 8px 32px rgba(255, 153, 0, 0.15) !important;
          }
          
          /* 响应式设计 */
          @media (max-width: 768px) {
            .content {
              padding: 1rem !important;
            }
            
            .content ol li,
            .content ul li {
              padding: 1rem !important;
            }
            
            .content blockquote {
              padding: 1rem !important;
            }
          }
          EOF
          
          echo "✅ 修复版CSS已创建"
          
          # 创建根目录首页
          cat > content/_index.md << 'EOF'
          ---
          title: AI洞察日报
          ---
          
          # AI洞察日报
          
          **精选AI新闻与深度分析** | 每日为您过滤信息噪音，提供最精选的AI资讯
          
          [查看最新日报 →](/cn/)
          EOF
          
          # 创建cn目录主页
          cat > content/cn/_index.md << 'EOF'
          ---
          linkTitle: AI Daily
          title: AI Daily-AI资讯日报
          breadcrumbs: false
          description: "个人每日整理的AI资讯站。我们为您过滤信息噪音，只提供最精选的AI新闻、最实用的AI工具与AI教程，助您高效获取人工智能领域的前沿动态"
          cascade:
            type: docs
          ---
          
          ## AI资讯日报
          
          >  `AI资讯` | `每日早读` | `全网数据聚合` | `前沿科学探索` | `行业自由发声` | `开源创新力量` | `AI与人类未来` | [访问网页版↗️](https://april8000.github.io/Hextra-AI-Insight-Daily/)
          
          欢迎来到AI洞察日报！这里为您提供每日精选的AI资讯和深度分析。
          
          ## 🔥 最新动态
          
          浏览左侧的日期导航查看最新的AI日报内容，每日更新，精彩不断！
          EOF
          
          # 处理日报文件 - 修复版
          find source-repo/daily -maxdepth 1 -type f -name "*.md" 2>/dev/null | sort -r | head -20 | while read -r SOURCE_FILE_PATH; do
            if [ -f "$SOURCE_FILE_PATH" ]; then
              FILENAME=$(basename "$SOURCE_FILE_PATH")
              DATE_PART=$(echo "$FILENAME" | sed -E 's/([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/')
              YEAR_MONTH=$(echo "$DATE_PART" | cut -c1-7)
              
              # 按年月创建目录
              TARGET_DIR="content/cn/${YEAR_MONTH}"
              mkdir -p "$TARGET_DIR"
              TARGET_FILE="${TARGET_DIR}/${FILENAME}"
              
              echo "--- 修复版处理文件: ${FILENAME} → ${TARGET_FILE} ---"
              
              # 读取原始内容
              ORIGINAL_CONTENT=$(cat "$SOURCE_FILE_PATH")
              
              # 生成日期显示格式
              DATE_DISPLAY=$(echo "$DATE_PART" | sed 's/-/\//g')
              
              # 使用Python修复标签和摘要
              python3 << PYTHON_EOF
          import re
          
          # 读取原始内容
          with open("${SOURCE_FILE_PATH}", "r", encoding="utf-8") as f:
              content = f.read()
          
          date_part = "${DATE_PART}"
          date_display = "${DATE_DISPLAY}"
          
          # 初始化各个分类的内容
          summary_content = ""
          product_news = []
          research_news = []
          industry_news = []
          opensource_news = []
          social_news = []
          
          # 智能提取摘要内容
          lines = content.split('\n')
          summary_lines = []
          
          # 寻找有意义的内容作为摘要
          for line in lines:
              line = line.strip()
              if line and len(line) > 15:  # 过滤掉过短的行
                  # 跳过明显的标题、列表项等
                  if (not line.startswith('#') and 
                      not line.startswith('```') and 
                      not line.startswith('---') and
                      not re.match(r'^\d+\.', line) and 
                      not line.startswith('- ') and 
                      not line.startswith('* ') and
                      not line.startswith('>')):
                      summary_lines.append(line)
                      if len(summary_lines) >= 3:  # 最多取3行
                          break
          
          if summary_lines:
              summary_content = '\n'.join(summary_lines[:3])
          else:
              summary_content = f"{date_display}的AI行业动态汇总，包含最新产品发布、技术突破、行业投资等重要资讯。"
          
          # 按行分析内容并分类
          current_item = ""
          
          for line in lines:
              if line.strip() and (re.match(r'^\d+\.', line) or line.startswith('- ') or line.startswith('* ')):
                  # 保存之前的条目
                  if current_item and len(current_item.strip()) > 20:  # 确保条目有足够内容
                      if re.search(r'产品|功能|更新|发布|工具|平台|API|服务|模型|应用', current_item, re.IGNORECASE):
                          product_news.append(current_item.strip())
                      elif re.search(r'研究|论文|学术|科学|实验|算法|框架', current_item, re.IGNORECASE):
                          research_news.append(current_item.strip())
                      elif re.search(r'投资|融资|IPO|商业|公司|估值|行业|市场|影响|展望', current_item, re.IGNORECASE):
                          industry_news.append(current_item.strip())
                      elif re.search(r'开源|GitHub|代码|开发者|项目|库|仓库', current_item, re.IGNORECASE):
                          opensource_news.append(current_item.strip())
                      elif re.search(r'社交|媒体|分享|讨论|用户|社区|推特|微博', current_item, re.IGNORECASE):
                          social_news.append(current_item.strip())
                      else:
                          # 默认分配到产品更新
                          product_news.append(current_item.strip())
                  current_item = line
              elif line.strip() and current_item:
                  current_item += '\n' + line
          
          # 处理最后一个条目
          if current_item and len(current_item.strip()) > 20:
              if re.search(r'产品|功能|更新|发布|工具|平台|API|服务|模型|应用', current_item, re.IGNORECASE):
                  product_news.append(current_item.strip())
              elif re.search(r'研究|论文|学术|科学|实验|算法|框架', current_item, re.IGNORECASE):
                  research_news.append(current_item.strip())
              elif re.search(r'投资|融资|IPO|商业|公司|估值|行业|市场|影响|展望', current_item, re.IGNORECASE):
                  industry_news.append(current_item.strip())
              elif re.search(r'开源|GitHub|代码|开发者|项目|库|仓库', current_item, re.IGNORECASE):
                  opensource_news.append(current_item.strip())
              elif re.search(r'社交|媒体|分享|讨论|用户|社区|推特|微博', current_item, re.IGNORECASE):
                  social_news.append(current_item.strip())
              else:
                  product_news.append(current_item.strip())
          
          # 构建最终内容 - 修复标签条和摘要
          structured_content = f"""## AI资讯日报 {date_display}
          
          >  `AI资讯` | `每日早读` | `全网数据聚合` | `前沿科学探索` | `行业自由发声` | `开源创新力量` | `AI与人类未来` | [访问网页版↗️](https://april8000.github.io/Hextra-AI-Insight-Daily/)
          
          
          
          ### **今日摘要**
          
          ```
          {summary_content}
          ```
          
          
          """
          
          # 添加分类内容
          if product_news:
              structured_content += "\n### 产品与功能更新\n"
              for i, news in enumerate(product_news[:5], 1):
                  clean_news = re.sub(r'^\d+\.\s*', '', news)
                  structured_content += f"{i}.  {clean_news}\n"
          
          if research_news:
              structured_content += "\n### 前沿研究\n"
              for i, news in enumerate(research_news[:3], 1):
                  clean_news = re.sub(r'^\d+\.\s*', '', news)
                  structured_content += f"{i}.  {clean_news}\n"
          
          if industry_news:
              structured_content += "\n### 行业展望与社会影响\n"
              for i, news in enumerate(industry_news[:3], 1):
                  clean_news = re.sub(r'^\d+\.\s*', '', news)
                  structured_content += f"{i}.  {clean_news}\n"
          
          if opensource_news:
              structured_content += "\n### 开源TOP项目\n"
              for i, news in enumerate(opensource_news[:4], 1):
                  clean_news = re.sub(r'^\d+\.\s*', '', news)
                  structured_content += f"{i}.  {clean_news}\n"
          
          if social_news:
              structured_content += "\n### 社媒分享\n"
              for i, news in enumerate(social_news[:5], 1):
                  clean_news = re.sub(r'^\d+\.\s*', '', news)
                  structured_content += f"{i}.  {clean_news}\n"
          
          # 创建Front Matter和完整内容
          final_content = f'''---
          linkTitle: {date_part[5:]}-日报
          title: {date_part[5:]}-日报-AI资讯日报
          weight: 1
          breadcrumbs: false
          comments: true
          description: "个人每日整理的AI资讯站。我们为您过滤信息噪音，只提供最精选的AI新闻、最实用的AI工具与AI教程，助您高效获取人工智能领域的前沿动态"
          ---
          
          {structured_content}
          '''
          
          # 写入文件
          with open("${TARGET_FILE}", "w", encoding="utf-8") as f:
              f.write(final_content)
          
          print(f"✅ 修复版文件已创建: ${TARGET_FILE}")
          PYTHON_EOF
              
              # 创建月份索引
              MONTH_INDEX="${TARGET_DIR}/_index.md"
              if [ ! -f "$MONTH_INDEX" ]; then
                cat > "$MONTH_INDEX" << INDEX_EOF
          ---
          title: "${YEAR_MONTH} AI日报"
          date: ${YEAR_MONTH}-01T00:00:00+08:00
          type: docs
          sidebar:
            open: true
          weight: 1
          ---
          
          # ${YEAR_MONTH} AI洞察日报
          
          本月的AI行业动态和技术趋势汇总，精选重要资讯。
          INDEX_EOF
                echo "✅ 月份索引已创建: ${MONTH_INDEX}"
              fi
            fi
          done
          
          echo "--- 修复版设置完成 ---"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            git commit -m "🔧 修复标签条和摘要显示：完美还原原作者格式 - $(date +%Y-%m-%d-%H-%M)"
            git push
            echo "✅ 修复版已推送"
          fi

      - name: Notify completion
        if: always()
        run: |
          echo "🔧 标签条和摘要修复完成！"
          echo "✅ 修复内容:"
          echo "   🏷️ 修复分类标签条正确显示"
          echo "   📝 智能提取和显示摘要内容"
          echo "   📂 保持5大固定分类结构"
          echo "   🔢 正确的编号格式"
          echo "   🎨 完全还原原作者样式"
          echo "   📋 准确的右侧导航"
          echo "📊 统计: $(find content/cn -name "*.md" -type f | wc -l) 个内容文件"
