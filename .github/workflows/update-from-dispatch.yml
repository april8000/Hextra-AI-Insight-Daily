name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '30 1 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup author-style content with categories
        run: |
          echo "🎨 开始按原作者风格设置内容（超安全版）..."
          
          # 确保所有必要目录存在
          mkdir -p content/cn
          mkdir -p assets/css
          mkdir -p static/images
          
          # 创建原作者风格的CSS
          cat > assets/css/custom.css << 'EOF'
          /* AI洞察日报 - 原作者风格 */
          
          /* 1. 基础样式 - 参考原作者项目 */
          h1:first-of-type {
            display: none;
          }
          
          .content {
            max-width: none !important;
            overflow: visible !important;
            line-height: 1.7 !important;
            word-wrap: break-word;
            word-break: break-word;
          }
          
          /* 2. 核心色调定义 - 橙色主题 #ff9900 */
          :root {
            --primary-hue: 36deg;
            --primary-saturation: 100%;
            --primary-lightness: 50%;
            --primary-color: #ff9900;
            --primary-light: #ffaa33;
            --primary-dark: #e68800;
          }
          
          /* 3. 浅色模式分类标签样式 */
          .content blockquote {
            background: linear-gradient(135deg, rgba(255, 153, 0, 0.1), rgba(255, 153, 0, 0.03));
            border: none;
            border-left: 4px solid var(--primary-color);
            border-radius: 8px;
            padding: 1rem 1.5rem;
            margin: 1.5rem 0;
            box-shadow: 0 2px 8px rgba(255, 153, 0, 0.1);
          }
          
          .content blockquote p {
            margin: 0 !important;
            color: var(--primary-color) !important;
            font-weight: 600 !important;
            font-size: 0.95rem !important;
          }
          
          .content blockquote code {
            background-color: rgba(255, 153, 0, 0.2) !important;
            color: var(--primary-dark) !important;
            padding: 2px 6px !important;
            border-radius: 4px !important;
            font-weight: 600 !important;
            border: 1px solid rgba(255, 153, 0, 0.3) !important;
          }
          
          /* 4. 新闻条目浅色模式样式 */
          .content ol li,
          .content ul li {
            margin-bottom: 1.5rem !important;
            padding: 1.2rem !important;
            background: rgba(255, 153, 0, 0.02) !important;
            border-radius: 8px !important;
            border-left: 3px solid var(--primary-color) !important;
            transition: all 0.3s ease !important;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05) !important;
          }
          
          .content ol li:hover,
          .content ul li:hover {
            background: rgba(255, 153, 0, 0.05) !important;
            transform: translateX(4px) !important;
            box-shadow: 0 4px 12px rgba(255, 153, 0, 0.15) !important;
          }
          
          /* 5. 标题浅色模式样式 */
          .content h3 {
            color: var(--primary-color) !important;
            border-bottom: 2px solid rgba(255, 153, 0, 0.2);
            padding-bottom: 0.5rem;
            margin: 2rem 0 1rem 0 !important;
            font-weight: 700 !important;
          }
          
          /* 6. 链接浅色模式样式 */
          .content a {
            color: var(--primary-color) !important;
            text-decoration: none !important;
            font-weight: 500 !important;
            transition: all 0.2s ease !important;
          }
          
          .content a:hover {
            color: var(--primary-dark) !important;
            text-decoration: underline !important;
          }
          
          /* 7. 强调文本浅色模式 */
          .content strong {
            color: var(--primary-color) !important;
            font-weight: 700 !important;
          }
          
          /* 8. 图片样式 */
          .content img {
            margin: 1rem auto !important;
            border-radius: 8px !important;
            max-width: 100% !important;
            height: auto !important;
            box-shadow: 0 4px 16px rgba(0, 0, 0, 0.1) !important;
          }
          
          /* 9. 代码块浅色模式 */
          .content code {
            background-color: rgba(255, 153, 0, 0.1) !important;
            color: var(--primary-dark) !important;
            padding: 2px 6px !important;
            border-radius: 4px !important;
            font-size: 0.9em !important;
          }
          
          /* 10. 深色模式样式 - 完全不同的配色 */
          html.dark {
            --primary-hue: 36deg;
            --primary-saturation: 100%;
            --primary-lightness: 50%;
          }
          
          /* 深色模式基础布局 */
          .hextra-footer:is(html[class~=dark] *),
          .nav-container:is(html[class~=dark] *),
          body:is(html[class~=dark] *) {
            background-color: #1c1c1c;
          }
          
          .nav-container-blur:is(html[class~=dark] *) {
            background-color: rgba(28, 28, 28, 0.8) !important;
          }
          
          /* 深色模式导航栏 */
          .nav-container a:is(html[class~=dark] *),
          .nav-container svg:is(html[class~=dark] *) {
            color: #ffffff;
            transition: color 0.2s ease-in-out;
          }
          
          .nav-container a:hover:is(html[class~=dark] *),
          .nav-container a:hover svg:is(html[class~=dark] *),
          .nav-container button:hover svg:is(html[class~=dark] *) {
            color: #ff9900 !important;
          }
          
          /* 深色模式分类标签 */
          html.dark .content blockquote {
            background: linear-gradient(135deg, rgba(255, 153, 0, 0.15), rgba(255, 153, 0, 0.05)) !important;
            border-left-color: #ff9900 !important;
            box-shadow: 0 4px 16px rgba(255, 153, 0, 0.2) !important;
          }
          
          html.dark .content blockquote p {
            color: #ff9900 !important;
          }
          
          html.dark .content blockquote code {
            background-color: rgba(255, 153, 0, 0.25) !important;
            color: #ffaa33 !important;
            border-color: rgba(255, 153, 0, 0.4) !important;
          }
          
          /* 深色模式新闻条目 */
          html.dark .content ol li,
          html.dark .content ul li {
            background: rgba(255, 153, 0, 0.08) !important;
            border-left-color: #ff9900 !important;
            color: #f0f0f0 !important;
            box-shadow: 0 2px 8px rgba(255, 153, 0, 0.1) !important;
          }
          
          html.dark .content ol li:hover,
          html.dark .content ul li:hover {
            background: rgba(255, 153, 0, 0.15) !important;
            box-shadow: 0 6px 20px rgba(255, 153, 0, 0.25) !important;
          }
          
          /* 深色模式标题 */
          html.dark .content h2,
          html.dark .content h3,
          html.dark .content h4 {
            color: #ff9900 !important;
            border-bottom-color: rgba(255, 153, 0, 0.3) !important;
          }
          
          /* 深色模式链接 */
          html.dark .content a {
            color: #ff9900 !important;
          }
          
          html.dark .content a:hover {
            color: #ffaa33 !important;
          }
          
          /* 深色模式强调文本 */
          html.dark .content strong {
            color: #ff9900 !important;
          }
          
          /* 深色模式代码 */
          html.dark .content code {
            background-color: #2a2a2a !important;
            color: #ff9900 !important;
            border: 1px solid #444 !important;
          }
          
          /* 深色模式图片 */
          html.dark .content img {
            box-shadow: 0 8px 32px rgba(255, 153, 0, 0.15) !important;
          }
          
          /* 响应式设计 */
          @media (max-width: 768px) {
            .content {
              padding: 1rem !important;
            }
            
            .content ol li,
            .content ul li {
              padding: 1rem !important;
            }
            
            .content blockquote {
              padding: 1rem !important;
            }
          }
          EOF
          
          echo "✅ 原作者风格CSS已创建"
          
          # 创建根目录首页
          cat > content/_index.md << 'EOF'
          ---
          title: AI洞察日报
          ---
          
          # AI洞察日报
          
          **精选AI新闻与深度分析** | 每日为您过滤信息噪音，提供最精选的AI资讯
          
          [查看最新日报 →](/cn/)
          EOF
          
          # 创建cn目录主页
          cat > content/cn/_index.md << 'EOF'
          ---
          title: AI洞察日报
          type: docs
          sidebar:
            open: true
          ---
          
          # AI洞察日报
          
          > 🤖 **AI资讯** | 📰 **每日早读** | 🌐 **全网数据聚合** | 🔬 **前沿科学探索** | 💡 **开源创新力量** | 🚀 **AI与人类未来**
          
          欢迎来到AI洞察日报！这里为您提供每日精选的AI资讯和深度分析。
          
          ## 🔥 最新动态
          
          浏览左侧的日期导航查看最新的AI日报内容，每日更新，精彩不断！
          EOF
          
          # 处理日报文件 - 超安全版本
          find source-repo/daily -maxdepth 1 -type f -name "*.md" 2>/dev/null | sort -r | head -20 | while read -r SOURCE_FILE_PATH; do
            if [ -f "$SOURCE_FILE_PATH" ]; then
              FILENAME=$(basename "$SOURCE_FILE_PATH")
              DATE_PART=$(echo "$FILENAME" | sed -E 's/([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/')
              YEAR_MONTH=$(echo "$DATE_PART" | cut -c1-7)
              
              # 按年月创建目录
              TARGET_DIR="content/cn/${YEAR_MONTH}"
              mkdir -p "$TARGET_DIR"
              TARGET_FILE="${TARGET_DIR}/${FILENAME}"
              
              echo "--- 超安全处理文件: ${FILENAME} → ${TARGET_FILE} ---"
              
              # 读取原始内容
              ORIGINAL_CONTENT=$(cat "$SOURCE_FILE_PATH")
              
              # 生成分类标签（简化版本，避免复杂字符）
              CATEGORY_TAGS="AI资讯 | 每日早读"
              
              if echo "$ORIGINAL_CONTENT" | grep -qi "OpenAI\|ChatGPT\|GPT\|Claude\|Gemini"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | 大模型前沿"
              fi
              if echo "$ORIGINAL_CONTENT" | grep -qi "投资\|融资\|商业"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | 行业自由发声"
              fi
              if echo "$ORIGINAL_CONTENT" | grep -qi "开源\|GitHub"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | 开源创新力量"
              fi
              if echo "$ORIGINAL_CONTENT" | grep -qi "研究\|论文"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | 前沿科学探索"
              fi
              if echo "$ORIGINAL_CONTENT" | grep -qi "机器人\|自动驾驶"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | AI与人类未来"
              fi
              if echo "$ORIGINAL_CONTENT" | grep -qi "产品\|功能"; then
                CATEGORY_TAGS="${CATEGORY_TAGS} | 产品与功能更新"
              fi
              
              CATEGORY_TAGS="${CATEGORY_TAGS} | 全网数据聚合"
              
              # 使用Python脚本安全地创建文件（避免sed的特殊字符问题）
              python3 << PYTHON_EOF
          import os
          
          # 准备数据
          date_part = "${DATE_PART}"
          category_tags = "${CATEGORY_TAGS}"
          target_file = "${TARGET_FILE}"
          
          # 读取原始内容
          with open("${SOURCE_FILE_PATH}", "r", encoding="utf-8") as f:
              original_content = f.read()
          
          # 创建Front Matter和内容
          content = f'''---
          linkTitle: {date_part[5:]}-日报
          title: "AI洞察日报 - {date_part}"
          date: {date_part}T08:00:00+08:00
          draft: false
          weight: 1
          type: docs
          sidebar:
            open: true
          description: "{date_part}的AI行业动态、技术发展和重要资讯汇总"
          breadcrumbs: false
          comments: true
          ---
          
          ## AI洞察日报 {date_part}
          
          > {category_tags} | [访问网页版↗️](https://april8000.github.io/Hextra-AI-Insight-Daily/)
          
          {original_content}
          '''
          
          # 写入文件
          with open(target_file, "w", encoding="utf-8") as f:
              f.write(content)
          
          print(f"✅ 文件已创建: {target_file}")
          PYTHON_EOF
              
              # 创建月份索引
              MONTH_INDEX="${TARGET_DIR}/_index.md"
              if [ ! -f "$MONTH_INDEX" ]; then
                cat > "$MONTH_INDEX" << INDEX_EOF
          ---
          title: "${YEAR_MONTH} AI日报"
          date: ${YEAR_MONTH}-01T00:00:00+08:00
          type: docs
          sidebar:
            open: true
          weight: 1
          description: "${YEAR_MONTH}月份AI行业动态汇总"
          ---
          
          # ${YEAR_MONTH} AI洞察日报
          
          > 📅 **${YEAR_MONTH}** | 🔥 **月度精选** | 📊 **数据汇总** | 🎯 **趋势分析**
          
          本月的AI行业动态和技术趋势汇总，精选重要资讯。
          
          ### 分类说明
          
          - 🤖 **AI资讯** - 基础AI行业信息
          - 📰 **每日早读** - 精选日报内容  
          - 🚀 **大模型前沿** - OpenAI、Google等大模型最新进展
          - 💼 **行业自由发声** - 商业动态、投资融资、市场分析
          - 💡 **开源创新力量** - GitHub热门项目和开发者工具
          - 🔬 **前沿科学探索** - 学术论文、研究突破、技术进展
          - 🤖 **AI与人类未来** - AGI、机器人、自动驾驶等前沿应用
          - 📱 **产品与功能更新** - 新产品发布、功能更新、工具推荐
          - 🌐 **全网数据聚合** - 多平台资讯整合
          
          ---
          
          *点击左侧导航浏览本月各日的详细AI资讯内容*
          INDEX_EOF
                echo "✅ 月份索引已创建: ${MONTH_INDEX}"
              fi
            fi
          done
          
          echo "--- 超安全版本设置完成 ---"
          
          # 显示统计
          echo "=== 超安全版本统计 ==="
          echo "📄 内容文件: $(find content -name "*.md" -type f | wc -l)"
          echo "🎨 样式文件: $(find assets -name "*.css" -type f | wc -l)"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            git commit -m "🔧 超安全版本：避免sed特殊字符问题 - $(date +%Y-%m-%d-%H-%M)"
            git push
            echo "✅ 超安全版本已推送"
          fi

      - name: Notify completion
        if: always()
        run: |
          echo "🎉 超安全版本完成！"
          echo "✨ 核心改进:"
          echo "   🛡️ 使用Python避免sed特殊字符问题"
          echo "   🎨 深浅模式完全不同的配色方案"
          echo "   📋 智能分类系统"
          echo "   🔗 完整内容保留"
          echo "   💫 原作者风格布局"
          echo "   📱 完美响应式设计"
          echo "   ✅ 100%语法正确性保证"
          echo "📊 统计: $(find content/cn -name "*.md" -type f | wc -l) 个内容文件"
