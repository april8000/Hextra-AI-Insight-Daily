name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '30 0 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Force sync all available content
        id: sync-content
        run: |
          echo "🔄 强制同步所有可用内容..."
          
          has_updates=false
          files_processed=0
          
          if [ -d "source-repo/daily" ]; then
            echo "📁 源仓库daily目录存在"
            echo "源仓库daily目录内容:"
            ls -la source-repo/daily/
            
            # 遍历所有source-repo/daily中的.md文件
            for source_file in source-repo/daily/*.md; do
              if [ -f "$source_file" ]; then
                # 提取文件名（不含路径）
                filename=$(basename "$source_file")
                echo "处理文件: $filename"
                
                # 提取日期（假设文件名格式为YYYY-MM-DD.md）
                if [[ $filename =~ ^([0-9]{4}-[0-9]{2}-[0-9]{2})\.md$ ]]; then
                  file_date="${BASH_REMATCH[1]}"
                  year_month="${file_date:0:7}"  # 提取YYYY-MM部分
                  
                  echo "文件日期: $file_date, 年月: $year_month"
                  
                  # 确保目标目录存在
                  target_dir="content/cn/${year_month}"
                  mkdir -p "$target_dir"
                  
                  target_file="$target_dir/$filename"
                  
                  # 检查是否需要更新
                  need_update=false
                  if [ ! -f "$target_file" ]; then
                    echo "✅ 新文件，需要创建: $target_file"
                    need_update=true
                  else
                    # 比较文件大小
                    source_size=$(wc -c < "$source_file")
                    target_size=$(wc -c < "$target_file")
                    if [ "$source_size" -ne "$target_size" ]; then
                      echo "📝 文件大小不同，需要更新: $target_file"
                      echo "源文件: ${source_size} bytes, 目标文件: ${target_size} bytes"
                      need_update=true
                    else
                      echo "ℹ️ 文件已存在且大小相同: $target_file"
                    fi
                  fi
                  
                  if [ "$need_update" = true ]; then
                    echo "🔄 处理文件: $source_file -> $target_file"
                    
                    # 生成Hugo Front Matter
                    cat > "$target_file" << EOF
---
title: "AI洞察日报 - ${file_date}"
date: ${file_date}T08:00:00+08:00
draft: false
tags: ["AI", "人工智能", "技术", "日报"]
categories: ["AI日报"]
weight: 1
---

EOF
                    
                    # 添加原始内容
                    cat "$source_file" >> "$target_file"
                    
                    echo "✅ 文件已处理: $target_file"
                    files_processed=$((files_processed + 1))
                    has_updates=true
                    
                    # 创建月份索引文件（如果不存在）
                    index_file="$target_dir/_index.md"
                    if [ ! -f "$index_file" ]; then
                      cat > "$index_file" << EOF
---
title: "${year_month} AI日报"
date: ${year_month}-01T00:00:00+08:00
type: docs
weight: 1
---

# ${year_month} AI洞察日报

本月的AI行业动态和技术趋势汇总。

EOF
                      echo "📄 创建索引文件: $index_file"
                    fi
                  fi
                else
                  echo "⚠️ 文件名格式不符合YYYY-MM-DD.md: $filename"
                fi
              fi
            done
            
            echo "📊 处理结果:"
            echo "处理的文件数量: $files_processed"
            echo "是否有更新: $has_updates"
            
            # 设置输出变量
            echo "has_updates=$has_updates" >> $GITHUB_OUTPUT
            echo "files_processed=$files_processed" >> $GITHUB_OUTPUT
            
          else
            echo "❌ 源仓库中没有daily目录"
            echo "源仓库根目录内容:"
            ls -la source-repo/ || echo "无法列出源仓库目录"
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "files_processed=0" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.sync-content.outputs.has_updates == 'true'
        run: |
          echo "📤 准备提交更改..."
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # 显示当前状态
          echo "当前git状态:"
          git status
          
          echo "待提交的文件:"
          git add .
          git status --porcelain
          
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            echo "✅ 发现更改，准备提交..."
            git commit -m "🤖 批量同步AI日报内容

            - 来源: april8000/ai-insight-daily-token
            - 处理文件数: ${{ steps.sync-content.outputs.files_processed }}
            - 触发方式: ${{ github.event_name }}
            - 同步时间: $(date '+%Y-%m-%d %H:%M:%S')
            "
            git push
            echo "🎉 内容已更新并推送到仓库!"
          fi

      - name: Summary
        if: always()
        run: |
          echo "📊 执行总结:"
          echo "工作流触发方式: ${{ github.event_name }}"
          echo "是否有更新: ${{ steps.sync-content.outputs.has_updates }}"
          echo "处理文件数: ${{ steps.sync-content.outputs.files_processed }}"
          
          echo ""
          echo "📁 当前content目录结构:"
          if [ -d "content" ]; then
            find content -type f -name "*.md" | sort
          else
            echo "content目录不存在"
          fi
          
          echo ""
          echo "📅 源仓库daily目录内容:"
          if [ -d "source-repo/daily" ]; then
            ls -la source-repo/daily/
          else
            echo "源仓库daily目录不存在"
          fi
