name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]  # 响应后端触发的事件
  workflow_dispatch:  # 允许手动触发
  schedule:
    - cron: '30 0 * * *'  # 每天北京时间8:30自动检查更新
  push:
    branches: [main]  # 当主分支有推送时也检查更新

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      # 拉取源仓库的最新内容
      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'  # 您的数据源仓库
          ref: 'main'  # 根据您的实际分支调整
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      # 检查是否有新内容
      - name: Check for new content
        id: check-updates
        run: |
          echo "🔍 检查源仓库中的新内容..."
          
          if [ -d "source-repo/daily" ]; then
            # 查找最近3天的文件，以防错过
            for i in 0 1 2; do
              CHECK_DATE=$(date -d "-$i days" +%Y-%m-%d)
              if [ -f "source-repo/daily/${CHECK_DATE}.md" ]; then
                YEAR_MONTH=$(date -d "-$i days" +%Y-%m)
                
                # 检查目标文件是否已存在且内容相同
                TARGET_FILE="content/cn/${YEAR_MONTH}/${CHECK_DATE}.md"
                
                if [ ! -f "$TARGET_FILE" ]; then
                  echo "找到新文件: ${CHECK_DATE}.md"
                  echo "has_updates=true" >> $GITHUB_OUTPUT
                  echo "latest_date=${CHECK_DATE}" >> $GITHUB_OUTPUT
                  echo "year_month=${YEAR_MONTH}" >> $GITHUB_OUTPUT
                  break
                else
                  # 比较文件内容差异（跳过前几行的Front Matter）
                  SOURCE_CONTENT=$(tail -n +10 "source-repo/daily/${CHECK_DATE}.md" 2>/dev/null || echo "")
                  TARGET_CONTENT=$(tail -n +10 "$TARGET_FILE" 2>/dev/null || echo "")
                  
                  if [ "$SOURCE_CONTENT" != "$TARGET_CONTENT" ]; then
                    echo "文件内容有更新: ${CHECK_DATE}.md"
                    echo "has_updates=true" >> $GITHUB_OUTPUT
                    echo "latest_date=${CHECK_DATE}" >> $GITHUB_OUTPUT
                    echo "year_month=${YEAR_MONTH}" >> $GITHUB_OUTPUT
                    break
                  fi
                fi
              fi
            done
            
            if [ "${has_updates:-false}" != "true" ]; then
              echo "没有发现新内容或更新"
              echo "has_updates=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ 源仓库中没有daily目录"
            echo "has_updates=false" >> $GITHUB_OUTPUT
          fi

      # 处理并转换内容格式
      - name: Process and convert content
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          LATEST_DATE=${{ steps.check-updates.outputs.latest_date }}
          YEAR_MONTH=${{ steps.check-updates.outputs.year_month }}
          
          echo "📝 处理日期: ${LATEST_DATE}"
          echo "📁 目标目录: ${YEAR_MONTH}"
          
          # 确保目录存在
          mkdir -p "content/cn/${YEAR_MONTH}"
          mkdir -p "content/en/${YEAR_MONTH}" 
          mkdir -p "content/ja/${YEAR_MONTH}"
          
          # 处理中文版本
          if [ -f "source-repo/daily/${LATEST_DATE}.md" ]; then
            echo "🔄 处理中文版本..."
            
            # 生成Hugo Front Matter
            cat > "content/cn/${YEAR_MONTH}/${LATEST_DATE}.md" << EOF
---
title: "AI洞察日报 - ${LATEST_DATE}"
date: ${LATEST_DATE}T08:00:00+08:00
draft: false
tags: ["AI", "人工智能", "技术", "日报"]
categories: ["AI日报"]
weight: 1
---

EOF
            
            # 添加原始内容，但跳过可能的重复标题
            tail -n +2 "source-repo/daily/${LATEST_DATE}.md" >> "content/cn/${YEAR_MONTH}/${LATEST_DATE}.md"
            
            echo "✅ 中文版本已处理: content/cn/${YEAR_MONTH}/${LATEST_DATE}.md"
          fi
          
          # 如果有英文或日文版本，也可以类似处理
          # 这里可以根据需要扩展

      # 更新索引文件
      - name: Update index files
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          YEAR_MONTH=${{ steps.check-updates.outputs.year_month }}
          
          # 更新月份索引文件
          if [ ! -f "content/cn/${YEAR_MONTH}/_index.md" ]; then
            cat > "content/cn/${YEAR_MONTH}/_index.md" << EOF
---
title: "${YEAR_MONTH} AI日报"
date: ${YEAR_MONTH}-01T00:00:00+08:00
type: docs
weight: 1
---

# ${YEAR_MONTH} AI洞察日报

本月的AI行业动态和技术趋势汇总。

EOF
          fi

      # 提交更改
      - name: Commit and push changes
        if: steps.check-updates.outputs.has_updates == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          if git diff --staged --quiet; then
            echo "ℹ️ 没有需要提交的更改"
          else
            git commit -m "🤖 自动更新AI日报内容 - ${{ steps.check-updates.outputs.latest_date }}

            - 来源: april8000/ai-insight-daily-token
            - 日期: ${{ steps.check-updates.outputs.latest_date }}
            - 触发方式: ${{ github.event_name }}
            "
            git push
            echo "✅ 内容已更新并推送到仓库"
          fi

      # 发送完成通知
      - name: Notify completion
        if: always()
        run: |
          if [ "${{ steps.check-updates.outputs.has_updates }}" == "true" ]; then
            echo "🎉 前端内容更新完成！"
            echo "📅 更新日期: ${{ steps.check-updates.outputs.latest_date }}"
            echo "🔗 网站将在几分钟内自动重新部署"
          else
            echo "ℹ️ 没有检测到内容更新"
          fi
