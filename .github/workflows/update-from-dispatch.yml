name: Update Content from Backend Dispatch

on:
  repository_dispatch:
    types: [daily-updated]
  workflow_dispatch:
  schedule:
    - cron: '30 1 * * *'

env:
  TZ: Asia/Shanghai

jobs:
  update-content:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Clone source repository
        uses: actions/checkout@v4
        with:
          repository: 'april8000/ai-insight-daily-token'
          ref: 'main'
          path: 'source-repo'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Process content with original-compatible format
        run: |
          echo "üîç Processing content with original-compatible format..."
          
          # Create target directory
          mkdir -p content/cn
          
          # Create cn main page (compatible with original)
          echo '---' > content/cn/_index.md
          echo 'title: AIÊ¥ûÂØüÊó•Êä•' >> content/cn/_index.md
          echo 'type: docs' >> content/cn/_index.md
          echo '---' >> content/cn/_index.md
          echo '' >> content/cn/_index.md
          echo '# AIÊ¥ûÂØüÊó•Êä•' >> content/cn/_index.md
          echo '' >> content/cn/_index.md
          echo '> ÊØèÊó•Á≤æÈÄâAIËµÑËÆØÔºåÊ∂µÁõñË°å‰∏öÂä®ÊÄÅ„ÄÅÊäÄÊúØÁ™ÅÁ†¥„ÄÅ‰∫ßÂìÅÂèëÂ∏ÉÁ≠âÈáçË¶Å‰ø°ÊÅØ' >> content/cn/_index.md
          echo '' >> content/cn/_index.md
          echo '## ÊµèËßàÂÜÖÂÆπ' >> content/cn/_index.md
          echo '- [üìÖ ÊúÄÊñ∞Êó•Êä•](/cn/)' >> content/cn/_index.md
          echo '- [üè∑Ô∏è ÊåâÊ†áÁ≠æÊµèËßà](/cn/tags/)' >> content/cn/_index.md
          echo '- [üìÇ ÊåâÂàÜÁ±ªÊµèËßà](/cn/categories/)' >> content/cn/_index.md
          
          # Process daily files with compatible format
          find source-repo/daily -maxdepth 1 -type f -name "*.md" 2>/dev/null | sort -r | head -20 | while read -r SOURCE_FILE_PATH; do
            if [ -f "$SOURCE_FILE_PATH" ]; then
              FILENAME=$(basename "$SOURCE_FILE_PATH")
              DATE_PART=$(echo "$FILENAME" | sed -E 's/([0-9]{4}-[0-9]{2}-[0-9]{2}).*/\1/')
              YEAR_MONTH=$(echo "$DATE_PART" | cut -c1-7)
              
              # Create directory by year-month
              TARGET_DIR="content/cn/${YEAR_MONTH}"
              mkdir -p "$TARGET_DIR"
              TARGET_FILE="${TARGET_DIR}/${FILENAME}"
              
              echo "Processing file: ${FILENAME} to ${TARGET_FILE}"
              
              # Read source content for tag analysis
              CONTENT=$(cat "$SOURCE_FILE_PATH")
              
              # Generate smart tags based on content analysis
              TAGS='["AI", "‰∫∫Â∑•Êô∫ËÉΩ", "ÊäÄÊúØ", "Êó•Êä•"'
              CATEGORIES='["AIÊó•Êä•"'
              
              # Add specific tags based on content analysis
              if echo "$CONTENT" | grep -qi "OpenAI\|ChatGPT\|GPT"; then
                TAGS="${TAGS}, \"OpenAI\", \"ChatGPT\""
                CATEGORIES="${CATEGORIES}, \"Â§ßÊ®°Âûã\""
              fi
              if echo "$CONTENT" | grep -qi "Ë∞∑Ê≠å\|Google\|Gemini\|Bard"; then
                TAGS="${TAGS}, \"Google\", \"Ë∞∑Ê≠å\""
                CATEGORIES="${CATEGORIES}, \"ÁßëÊäÄÂ∑®Â§¥\""
              fi
              if echo "$CONTENT" | grep -qi "ÂæÆËΩØ\|Microsoft\|Copilot"; then
                TAGS="${TAGS}, \"ÂæÆËΩØ\", \"Microsoft\""
                CATEGORIES="${CATEGORIES}, \"ÁßëÊäÄÂ∑®Â§¥\""
              fi
              if echo "$CONTENT" | grep -qi "Meta\|Facebook"; then
                TAGS="${TAGS}, \"Meta\", \"Facebook\""
                CATEGORIES="${CATEGORIES}, \"ÁßëÊäÄÂ∑®Â§¥\""
              fi
              if echo "$CONTENT" | grep -qi "Ëá™Âä®È©æÈ©∂\|Êó†‰∫∫È©æÈ©∂"; then
                TAGS="${TAGS}, \"Ëá™Âä®È©æÈ©∂\""
                CATEGORIES="${CATEGORIES}, \"Ëá™Âä®È©æÈ©∂\""
              fi
              if echo "$CONTENT" | grep -qi "Êú∫Âô®Â≠¶‰π†\|Ê∑±Â∫¶Â≠¶‰π†\|ML\|DL"; then
                TAGS="${TAGS}, \"Êú∫Âô®Â≠¶‰π†\", \"Ê∑±Â∫¶Â≠¶‰π†\""
                CATEGORIES="${CATEGORIES}, \"Êú∫Âô®Â≠¶‰π†\""
              fi
              if echo "$CONTENT" | grep -qi "ËäØÁâá\|GPU\|CPU\|Ëã±‰ºüËææ\|NVIDIA"; then
                TAGS="${TAGS}, \"ËäØÁâá\", \"Á°¨‰ª∂\""
                CATEGORIES="${CATEGORIES}, \"Á°¨‰ª∂\""
              fi
              if echo "$CONTENT" | grep -qi "ÊäïËµÑ\|ËûçËµÑ\|IPO\|‰∏äÂ∏Ç\|‰∫øÁæéÂÖÉ"; then
                TAGS="${TAGS}, \"ÊäïËµÑ\", \"ËûçËµÑ\""
                CATEGORIES="${CATEGORIES}, \"ÂïÜ‰∏ö\""
              fi
              if echo "$CONTENT" | grep -qi "ÂºÄÊ∫ê\|GitHub\|‰ª£Á†Å"; then
                TAGS="${TAGS}, \"ÂºÄÊ∫ê\", \"GitHub\""
                CATEGORIES="${CATEGORIES}, \"ÂºÄÊ∫ê\""
              fi
              if echo "$CONTENT" | grep -qi "Á†îÁ©∂\|ËÆ∫Êñá\|Â≠¶ÊúØ\|Â§ßÂ≠¶"; then
                TAGS="${TAGS}, \"Á†îÁ©∂\", \"Â≠¶ÊúØ\""
                CATEGORIES="${CATEGORIES}, \"Á†îÁ©∂\""
              fi
              
              TAGS="${TAGS}]"
              CATEGORIES="${CATEGORIES}]"
              
              # Generate Front Matter compatible with original format but with tags
              echo '---' > "$TARGET_FILE"
              echo "linkTitle: $(echo $DATE_PART | cut -c6-10)-Êó•Êä•" >> "$TARGET_FILE"
              echo "title: \"AIÊ¥ûÂØüÊó•Êä• - ${DATE_PART}\"" >> "$TARGET_FILE"
              echo "date: ${DATE_PART}T08:00:00+08:00" >> "$TARGET_FILE"
              echo 'weight: 30' >> "$TARGET_FILE"
              echo 'breadcrumbs: false' >> "$TARGET_FILE"
              echo 'comments: true' >> "$TARGET_FILE"
              echo "description: \"${DATE_PART}ÁöÑAIË°å‰∏öÂä®ÊÄÅ„ÄÅÊäÄÊúØÂèëÂ±ïÂíåÈáçË¶ÅËµÑËÆØÊ±áÊÄª\"" >> "$TARGET_FILE"
              echo "tags: ${TAGS}" >> "$TARGET_FILE"
              echo "categories: ${CATEGORIES}" >> "$TARGET_FILE"
              echo '---' >> "$TARGET_FILE"
              echo '' >> "$TARGET_FILE"
              
              # Add original content
              cat "$SOURCE_FILE_PATH" >> "$TARGET_FILE"
              echo "‚úÖ File processed with compatible format: ${TARGET_FILE}"
              
              # Create month index if not exists (compatible format)
              MONTH_INDEX="${TARGET_DIR}/_index.md"
              if [ ! -f "$MONTH_INDEX" ]; then
                echo '---' > "$MONTH_INDEX"
                echo "title: \"${YEAR_MONTH} AIÊó•Êä•\"" >> "$MONTH_INDEX"
                echo "date: ${YEAR_MONTH}-01T00:00:00+08:00" >> "$MONTH_INDEX"
                echo 'type: docs' >> "$MONTH_INDEX"
                echo 'weight: 1' >> "$MONTH_INDEX"
                echo "description: \"${YEAR_MONTH}Êúà‰ªΩAIË°å‰∏öÂä®ÊÄÅÊ±áÊÄª\"" >> "$MONTH_INDEX"
                echo '---' >> "$MONTH_INDEX"
                echo '' >> "$MONTH_INDEX"
                echo "# ${YEAR_MONTH} AIÊ¥ûÂØüÊó•Êä•" >> "$MONTH_INDEX"
                echo '' >> "$MONTH_INDEX"
                echo 'Êú¨ÊúàÁöÑAIË°å‰∏öÂä®ÊÄÅÂíåÊäÄÊúØË∂ãÂäøÊ±áÊÄªÔºåÂåÖÊã¨Ôºö' >> "$MONTH_INDEX"
                echo '- üî• Ë°å‰∏öÁÉ≠ÁÇπÊñ∞Èóª' >> "$MONTH_INDEX"
                echo '- üõ†Ô∏è ÊäÄÊúØ‰∫ßÂìÅÂèëÂ∏É' >> "$MONTH_INDEX"
                echo '- üìä Â∏ÇÂú∫ÊäïËµÑÂä®ÊÄÅ' >> "$MONTH_INDEX"
                echo '- üß† Â≠¶ÊúØÁ†îÁ©∂ËøõÂ±ï' >> "$MONTH_INDEX"
                echo '- üí° ÂºÄÊ∫êÈ°πÁõÆÊé®Ëçê' >> "$MONTH_INDEX"
                echo "Month index created: ${MONTH_INDEX}"
              fi
            fi
          done
          
          echo "--- Content processing with compatible format completed ---"
          
          # Show directory structure
          echo "=== Directory Structure ==="
          find content -type f -name "*.md" | head -10
          
          # Show tag statistics
          echo "=== Tag Statistics ==="
          echo "Total content files: $(find content/cn -name "*.md" -not -name "_index.md" | wc -l)"

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üè∑Ô∏è Compatible content sync with tags support - $(date +%Y-%m-%d-%H-%M)"
            git push
            echo "Compatible content synced and pushed to repository"
          fi
