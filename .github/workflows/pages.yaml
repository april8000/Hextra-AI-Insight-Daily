# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # 当内容同步工作流完成时自动触发
  workflow_run:
    workflows: ["Update Content from Backend Dispatch"]
    types:
      - completed
      
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.147.9
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # fetch all history for .GitInfo and .Lastmod
          submodules: false
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Setup Hugo (Compatible Version)
        run: |
          echo "Installing Hugo ${HUGO_VERSION}..."
          cd ${{ runner.temp }}
          
          # 下载Hugo扩展版
          wget https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz
          
          # 解压
          tar -xzf hugo_extended_${HUGO_VERSION}_linux-amd64.tar.gz
          
          # 移动到PATH中
          sudo mv hugo /usr/local/bin/
          
          # 验证安装
          hugo version
          
          echo "Hugo installation completed successfully!"
      
      - name: Setup Hextra theme (Direct Clone)
        run: |
          echo "Setting up Hextra theme via direct clone..."
          
          # 创建themes目录并克隆主题
          mkdir -p themes
          git clone --depth 1 https://github.com/imfing/hextra.git themes/hextra
          
          echo "Hextra theme cloned successfully!"
          ls -la themes/
      
      - name: Create Hugo config (No Modules)
        run: |
          echo "Creating Hugo configuration without modules..."
          
          # 创建hugo.yaml配置（不使用模块）
          cat > hugo.yaml << 'EOF'
          baseURL: "https://april8000.github.io/Hextra-AI-Insight-Daily/"
          title: "AI洞察日报 | 精选AI新闻与深度分析"
          
          # 使用传统主题方式，不使用模块
          theme: hextra
          
          # 基础设置
          timezone: Asia/Shanghai
          enableRobotsTXT: true
          enableGitInfo: true
          enableEmoji: true
          hasCJKLanguage: true
          enableInlineShortcodes: true
          
          markup:
            goldmark:
              renderer:
                unsafe: true
            highlight:
              noClasses: false
          
          menu:
            main:
              - identifier: search
                name: 搜索
                weight: 10
                params:
                  type: search
              - identifier: documentation
                name: AI日报
                pageRef: /cn
                weight: 1
              - identifier: github   
                name: GitHub
                weight: 2
                url: "https://github.com/april8000/Hextra-AI-Insight-Daily"
                params:
                  icon: github
          
          params:
            description: "个人每日整理的AI资讯站。我们为您过滤信息噪音，只提供最精选的AI新闻、最实用的AI工具与AI教程，助您高效获取人工智能领域的前沿动态"
            
            navbar:
              displayTitle: true
              displayLogo: false
          
            footer:
              displayCopyright: false
              displayPoweredBy: true
          
            search:
              enable: true
              type: flexsearch
              flexsearch:
                index: content
          
            page:
              width: wide
              sidebar:
                enable: true
          
          # 语言配置
          defaultContentLanguage: zh
          languages:
            zh:
              languageCode: zh-CN
              contentDir: content/cn
              languageName: 简体中文
              weight: 1
          EOF
          
          echo "Hugo configuration created successfully!"
      
      - name: Check content structure
        run: |
          echo "=== 检查Hugo配置 ==="
          if [ -f "hugo.yaml" ]; then
            echo "✅ hugo.yaml exists"
            head -10 hugo.yaml
          else
            echo "❌ hugo.yaml missing"
          fi
          
          echo "=== 检查主题 ==="
          if [ -d "themes/hextra" ]; then
            echo "✅ Hextra theme exists"
            ls -la themes/hextra/ | head -5
          else
            echo "❌ Hextra theme missing"
          fi
          
          echo "=== 检查自定义样式 ==="
          if [ -f "assets/css/custom.css" ]; then
            echo "✅ custom.css exists"
            ls -la assets/css/
          else
            echo "❌ custom.css missing"
          fi
          
          echo "=== 检查内容目录 ==="
          ls -la content/ || echo "content目录不存在"
          ls -la content/cn/ || echo "content/cn目录不存在"
          
          echo "=== 统计内容文件 ==="
          find content -name "*.md" -type f | wc -l | xargs echo "找到markdown文件数量:"
      
      - name: Build with Hugo (No Modules)
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          echo "Starting Hugo build without modules..."
          
          # 显示Hugo环境信息
          hugo env
          
          # 构建网站（不使用任何模块命令）
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}/"
          
          echo "Checking build results..."
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            echo "✅ Build successful!"
            ls -la public/
            echo "=== 检查生成的页面 ==="
            find public -name "*.html" | head -5
            echo "=== 检查生成的CSS ==="
            find public -name "*.css" | head -3
          else
            echo "❌ Build failed - public directory is empty"
            exit 1
          fi
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
